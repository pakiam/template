// Fix no working `-webkit-text-size-adjust: 100%;` in Android.
@mixin fix-text-size-adjust(){
	background-image: linear-gradient(transparent, transparent)
}


// Set element size
@mixin size($width, $height){
	width: $width;
	@if $height {
        height: $height;
    } @else {
        height: $width;
    }

}

// Set margin on left & right
@mixin margin-x($margin){
	margin-left: $margin;
	margin-right: $margin;
}

// Set margin on top & bottom
@mixin margin-y($margin){
	margin-top: $margin;
	margin-bottom: $margin;
}

// Set pading on left & right
@mixin padding-x($padding){
	padding-left: $padding;
	padding-right: $padding;
}

// Set padding on top & bottom
@mixin padding-y($padding){
	padding-top: $padding;
	padding-bottom: $padding;
}

// Set one static retina image
@mixin retinaBackground($image, $ext) {
	@if not($ext){
		$ext: 'png';
	}
	background-image: url('../images/' + $image + '.' + $ext);

	@media (-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi) {
		background-image: url('../images/' + $image + '@2x.' + $ext);
	}
}

// Flex sticky footer
@mixin wrapperStickyFooter() {
	display: flex;
	min-height: 100vh;
	height: 100vh; // fix IE/Edge
	flex-direction: column;
}
@mixin contentStickyFooter() {
	flex: 1;
}

// Transition
@mixin transition($prop...) {
    transition-property: $prop;
    transition-duration: $gl-trs-duration;
    transition-timing-function: $gl-trs-function;
}

@mixin unstyled-link {
    color: inherit;
    text-decoration: inherit;
    cursor: inherit;

    &:active,
    &:focus {
        outline: none;
    }
}

// Hide text
@mixin squish-text {
    font: 0/0 serif;
    text-shadow: none;
    color: transparent;
}

// Text transform uppercase
@mixin text-transform($letter-spacing: $gl-letter-spacing) {
    text-transform: uppercase;

    @if ($letter-spacing != false) {
        letter-spacing: $letter-spacing;
    }

}

// Buton vertical paddings
@mixin btn-vertical-paddings($height) {
    @if rhythm($height) < $base-vertical-rhythm {
        line-height: ($base-vertical-rhythm / 2) - ($btn-bd-width * 2);
        padding: {
            top: 0;
            bottom: 0;
        };
        font-size: 8px;
    } @else if rhythm($height) == $base-vertical-rhythm {
        line-height: $base-vertical-rhythm - ($btn-bd-width * 2);
        padding: {
            top: 0;
            bottom: 0;
        };
    } @else {
        $paddings: ((rhythm($height) - $base-vertical-rhythm) / 2) - ($btn-bd-width);
        padding: {
            top: $paddings;
            bottom: $paddings;
        };
    }
}

// SPRITE
@function get-sprite($key) {
    @if map-has-key($sprites-map, $key) {
        @return map-get($sprites-map, $key);
    }

    @warn 'Unknown `#{$key}` in $sprites-map.';
    @return null;
}

@mixin get-sprite-width($sprite) {
    width: nth($sprite, 5);
}

@mixin get-sprite-height($sprite) {
    height: nth($sprite, 6);
}

@function sprite-width($sprite-name) {
    $sprite: get-sprite($sprite-name);
    @return nth($sprite, 5);
}

@function sprite-height($sprite-name) {
    $sprite: get-sprite($sprite-name);
    @return nth($sprite, 6);
}

@mixin sprite-position($sprite) {
    $sprite-offset-x: nth($sprite, 3);
    $sprite-offset-y: nth($sprite, 4);
    background-position: $sprite-offset-x  $sprite-offset-y;
}

@mixin sprite-image($sprite) {
    $sprite-image: nth($sprite, 9);
    background-image: url('#{$sprite-image}');
}

@mixin sprite-1x($sprite) {
    @include sprite-image($sprite);
    @include sprite-position($sprite);
    @include get-sprite-width($sprite);
    @include get-sprite-height($sprite);
}

@mixin sprite-background-size($sprite) {
    background-size: nth($sprite, 7) nth($sprite, 8);
}

@mixin sprite($sprite-name) {
    $sprite: get-sprite($sprite-name);
    @include sprite-1x($sprite);

    @if variable-exists(sprites-2x-map) and map-has-key($sprites-2x-map, $sprite-name) {
        @media only screen and (-webkit-min-device-pixel-ratio: 1.5), screen and (min-device-pixel-ratio: 1.5) {
            @include sprite-image(map-get($sprites-2x-map, $sprite-name));
            @include sprite-background-size($sprite);
        }
    }
}

// Vertical rhythm
@mixin margin-trailer($number) {
    margin-bottom: $number * $base-vertical-rhythm;
}

@mixin margin-leader($number) {
    margin-top: $number * $base-vertical-rhythm;
}

@mixin padding-trailer($number) {
    padding-bottom: $number * $base-vertical-rhythm;
}

@mixin padding-leader($number) {
    padding-top: $number * $base-vertical-rhythm;
}

@mixin rhythm-padding($top, $bottom: $top) {
    padding: {
        top: $top * $base-vertical-rhythm;
        bottom: $bottom * $base-vertical-rhythm;
    };
}

@mixin rhythm-margins($top, $bottom: $top) {
    margin: {
        top: $top * $base-vertical-rhythm;
        bottom: $bottom * $base-vertical-rhythm;
    };
}

@function rhythm($number) {
    @return $number * $base-vertical-rhythm;
}

